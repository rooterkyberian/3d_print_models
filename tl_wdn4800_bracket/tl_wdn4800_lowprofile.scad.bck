/**
* @author Maciej Urbanski (rooter@kyberian.net)
* @brief  TL-WDN48000 Low profile bracket 
* @license GPL
* @date   Aug, 2013
* @version 0.3
*
* Low profile bracket for TP-Link TL-WDN4800 card. Printing with additional support highly advised due to small size and two "hanging" elements. 100% infill also wouldn't hurt.
* Holes can be slightly undersized - I figured I will have to use drills anyways, also it's easier to attach screws to smaller holes.
*/

bracket_t = 1;
bracket_w = 18;
bracket_h = 150;
lowprofile_bracket_h = 80;
$fn = 100;


module bracket_handle(w, t) {
    bw = 11;
    hole_w = 4;
    linear_extrude(height=bracket_t)
        union() {
            difference() {
                square([bw+t, w]);
                translate([6+t, w-5])
                {
                    circle(r=hole_w/2);
                    translate ([-hole_w/2,0,0]) {
                    square([hole_w, 1000]);
                    }
                }
            }
        }
}

module bracket_base(h, w, t) {
    s1 = 4;
    s2 = 7;
    main_part_h = h-(s1+s2);
    s3Â = (w - 10) / 2;
    linear_extrude(height=t)
        polygon(points=[[0,0],[0,w],
                        [main_part_h,0],[main_part_h,w],
                        [main_part_h+s1,s1],[main_part_h+s1,w-s1],
                        [h, s3], [h, w -s3]],
                        paths=[[0,1,3,5,7,6,4,2]]);
}

module bracket(h, w, t) {
    union() {
        //lower half
        bracket_base(h, w, t);
        //handle
        translate ([t,4,0])
        rotate([0,270]) 
        bracket_handle(w, t);
    }
}


module wdn4800_bracket() {
    hw=8; //6
    hh=bracket_t+10; //+9
    ht=1.5;
    difference()
    {
        union()
        {
            bracket(lowprofile_bracket_h, bracket_w, bracket_t);
            bracket(lowprofile_bracket_h, bracket_w, bracket_t);
            translate([6.5-hw/2,0,0])
            rotate([270,0])
            {
                for(i = [0:1])
                {
                    translate([53*i,0])
                    union() {
                        translate([0,-bracket_t,0])
                        difference()
                        {
                            cube([hw,hh,ht]);
                            translate([0, 0, -ht*2])
                            linear_extrude(height=ht*5)
                            translate([hw/2, 4+ht])
                            circle(r=1, center = true);
                        }
                    }
                }
            }
        };
        //holes
        translate([0, ht, -bracket_t])
        linear_extrude(height=bracket_t*3)
        union()
        {
            translate([15, 9])
            {
                for ( i = [0:2] )
                {
                    translate([13*i,0])
                    circle(r=3, center = true);
                }
            }
            translate([52, 5])
            circle(r=2, center = true);
        }
    }
}

rotate([90,0,0])
wdn4800_bracket();
